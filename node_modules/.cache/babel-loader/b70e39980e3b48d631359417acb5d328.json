{"ast":null,"code":"/*\r\n * action types\r\n */\nimport fetch from 'cross-fetch';\nexport var GET_DECK = 'GET_DECK';\nexport var FLIP_CARD = 'FLIP_CARD';\nexport var TIMER = \"TIMER\";\nexport var SET_CARD = \"SET_CARD\";\nexport var UNFLIP_CARDS = \"UNFLIP_CARDS\";\n/*\r\n * action creators\r\n */\n\nfunction receiveCard(json) {\n  return json;\n}\n\nfunction getCards(json) {\n  var idDeck = json.deck_id;\n  return fetch(\"https://deckofcardsapi.com/api/deck/\".concat(idDeck, \"/draw/?count=52\")).then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    return receiveCard(json);\n  });\n}\n\nfunction fetchDeck() {\n  return fetch(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\").then(function (response) {\n    return response.json();\n  }).then(function (json) {\n    return getCards(json);\n  });\n}\n\nexport function getDeck(e) {\n  return function (dispatch) {\n    return fetchDeck().then(function (deck) {\n      dispatch({\n        type: GET_DECK,\n        deck: deck\n      });\n    });\n  };\n}\nexport function onCardClick(id, value) {\n  return function (dispatch, getState) {\n    return dispatch(check(getState(), id, value));\n  };\n}\nexport function updateCardGame(value, id) {\n  return {\n    type: SET_CARD,\n    value: value,\n    id: id\n  };\n}\nexport function cardFlip(id) {\n  return {\n    type: FLIP_CARD,\n    id: id\n  };\n}\nexport function updateTimer() {\n  return function (dispatch) {\n    return dispatch({\n      type: TIMER\n    });\n  };\n}\n\nfunction check(state, id, value) {\n  var flipped = state.game.flipped;\n\n  if (flipped.id != id && flipped.value == value) {//retourner + update + suppr\n  } else if (flipped.id == id && flipped.value == value) {//rien\n  } else if (flipped.id == undefined) {\n    return function (dispatch) {\n      dispatch(updateCardGame(value, id));\n      return dispatch(cardFlip(id));\n    };\n  } else {\n    return function (dispatch) {\n      dispatch(updateCardGame(value, id));\n      dispatch(cardFlip(id));\n      dispatch(blocked());\n      setTimeout(function () {\n        dispatch(unflip());\n        dispatch(unblocked());\n      }, 500);\n    };\n  }\n}\n\nfunction unflip() {\n  return {\n    type: UNFLIP_CARDS\n  };\n}","map":{"version":3,"sources":["C:\\Users\\PhakkyoC\\WebstormProjects\\memories\\memories\\src\\Actions.js"],"names":["fetch","GET_DECK","FLIP_CARD","TIMER","SET_CARD","UNFLIP_CARDS","receiveCard","json","getCards","idDeck","deck_id","then","response","fetchDeck","getDeck","e","dispatch","deck","type","onCardClick","id","value","getState","check","updateCardGame","cardFlip","updateTimer","state","flipped","game","undefined","blocked","setTimeout","unflip","unblocked"],"mappings":"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","sourcesContent":["/*\r\n * action types\r\n */\r\nimport fetch from 'cross-fetch'\r\n\r\n\r\nexport const GET_DECK = 'GET_DECK';\r\nexport const FLIP_CARD='FLIP_CARD';\r\nexport const TIMER = \"TIMER\";\r\nexport const SET_CARD = \"SET_CARD\";\r\nexport const UNFLIP_CARDS=\"UNFLIP_CARDS\";\r\n/*\r\n * action creators\r\n */\r\nfunction receiveCard(json) {\r\n    return json\r\n}\r\n\r\nfunction getCards(json) {\r\n    let idDeck = json.deck_id;\r\n    return fetch(`https://deckofcardsapi.com/api/deck/${idDeck}/draw/?count=52`)\r\n        .then(response => response.json())\r\n        .then(json => receiveCard(json))\r\n\r\n}\r\n\r\nfunction fetchDeck() {\r\n    return fetch(`https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1`)\r\n        .then(response => response.json())\r\n        .then(json => getCards(json))\r\n\r\n}\r\n\r\nexport function getDeck(e) {\r\n    return function (dispatch){\r\n        return fetchDeck().then(deck => {\r\n            dispatch( {\r\n                type: GET_DECK,\r\n                deck,\r\n            })\r\n        })\r\n    }\r\n}\r\nexport function onCardClick(id,value) {\r\n    return (dispatch, getState) => {\r\n        return dispatch(check(getState(),id,value))\r\n    };\r\n}\r\n\r\nexport function updateCardGame(value,id) {\r\n    return {type: SET_CARD, value:value,id:id}\r\n}\r\n\r\nexport function cardFlip(id) {\r\n    return {type: FLIP_CARD, id}\r\n}\r\n\r\nexport function updateTimer() {\r\n    return function (dispatch){\r\n        return dispatch({type: TIMER})\r\n    }\r\n}\r\n\r\nfunction check(state,id,value) {\r\n    let flipped = state.game.flipped;\r\n    if (flipped.id!=id && flipped.value==value)\r\n    {\r\n        //retourner + update + suppr\r\n    }\r\n    else if(flipped.id==id && flipped.value==value){\r\n        //rien\r\n    }\r\n    else if(flipped.id==undefined){\r\n        return (dispatch) => {\r\n            dispatch(updateCardGame(value,id))\r\n            return dispatch(cardFlip(id));\r\n        };\r\n    }\r\n    else{\r\n        return (dispatch) => {\r\n            dispatch(updateCardGame(value,id))\r\n            dispatch(cardFlip(id))\r\n            dispatch(blocked())\r\n            setTimeout(() => {\r\n                dispatch(unflip())\r\n                dispatch(unblocked())\r\n            }, 500)\r\n        };\r\n    }\r\n\r\n}\r\n\r\nfunction unflip() {\r\n    return {type: UNFLIP_CARDS}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}