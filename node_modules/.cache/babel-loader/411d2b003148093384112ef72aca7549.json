{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\PhakkyoC\\\\WebstormProjects\\\\memories\\\\memories\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\PhakkyoC\\\\WebstormProjects\\\\memories\\\\memories\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { combineReducers } from 'redux';\nimport { GET_DECK, FLIP_CARD, TIMER } from './Actions';\n\nfunction game() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    timer: 300,\n    score: 0,\n    flipped: ''\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case TIMER:\n      state.timer = state.timer - 1;\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n}\n\nfunction cards() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_DECK:\n      var i = 0;\n      action.deck.cards.map(function (e) {\n        e.flipped = false;\n        e.id = i;\n        state[i] = e;\n        i++;\n      });\n      return _toConsumableArray(state);\n\n    case FLIP_CARD:\n      return state.map(function (card, index) {\n        if (action.id === card.id) {\n          return Object.assign({}, card, {\n            flipped: !card.flipped\n          });\n        }\n\n        return card;\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar gameApp = combineReducers({\n  game: game,\n  cards: cards\n});\nexport default gameApp;","map":{"version":3,"sources":["C:\\Users\\PhakkyoC\\WebstormProjects\\memories\\memories\\src\\Reducers.js"],"names":["combineReducers","GET_DECK","FLIP_CARD","TIMER","game","state","timer","score","flipped","action","type","cards","i","deck","map","e","id","card","index","Object","assign","gameApp"],"mappings":";;AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SACIC,QADJ,EACaC,SADb,EACuBC,KADvB,QAEO,WAFP;;AAIA,SAASC,IAAT,GAA6D;AAAA,MAA/CC,KAA+C,uEAAvC;AAACC,IAAAA,KAAK,EAAC,GAAP;AAAWC,IAAAA,KAAK,EAAC,CAAjB;AAAmBC,IAAAA,OAAO,EAAC;AAA3B,GAAuC;AAAA,MAARC,MAAQ;;AACzD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAL;AACIE,MAAAA,KAAK,CAACC,KAAN,GAAcD,KAAK,CAACC,KAAN,GAAY,CAA1B;AACA,+BAAWD,KAAX;;AACJ;AACI,aAAOA,KAAP;AALR;AAOH;;AAED,SAASM,KAAT,GAAmC;AAAA,MAApBN,KAAoB,uEAAZ,EAAY;AAAA,MAARI,MAAQ;;AAC/B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,QAAL;AACI,UAAIW,CAAC,GAAG,CAAR;AACAH,MAAAA,MAAM,CAACI,IAAP,CAAYF,KAAZ,CAAkBG,GAAlB,CAAsB,UAACC,CAAD,EAAM;AACxBA,QAAAA,CAAC,CAACP,OAAF,GAAY,KAAZ;AACAO,QAAAA,CAAC,CAACC,EAAF,GAAOJ,CAAP;AACAP,QAAAA,KAAK,CAACO,CAAD,CAAL,GAAWG,CAAX;AACAH,QAAAA,CAAC;AACJ,OALD;AAMA,gCAAWP,KAAX;;AACJ,SAAKH,SAAL;AACI,aAAOG,KAAK,CAACS,GAAN,CAAU,UAACG,IAAD,EAAMC,KAAN,EAAiB;AAC9B,YAAIT,MAAM,CAACO,EAAP,KAAcC,IAAI,CAACD,EAAvB,EAA2B;AACvB,iBAAOG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,EAAwB;AAC3BT,YAAAA,OAAO,EAAE,CAACS,IAAI,CAACT;AADY,WAAxB,CAAP;AAGH;;AACD,eAAOS,IAAP;AACH,OAPM,CAAP;;AAQJ;AACI,aAAOZ,KAAP;AApBR;AAsBH;;AAED,IAAMgB,OAAO,GAAGrB,eAAe,CAAC;AAC5BI,EAAAA,IAAI,EAAJA,IAD4B;AAE5BO,EAAAA,KAAK,EAALA;AAF4B,CAAD,CAA/B;AAKA,eAAeU,OAAf","sourcesContent":["import { combineReducers } from 'redux'\r\nimport {\r\n    GET_DECK,FLIP_CARD,TIMER\r\n} from './Actions'\r\n\r\nfunction game(state = {timer:300,score:0,flipped:''},action) {\r\n    switch (action.type) {\r\n        case TIMER:\r\n            state.timer = state.timer-1;\r\n            return {...state};\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction cards(state = [], action) {\r\n    switch (action.type) {\r\n        case GET_DECK:\r\n            let i = 0;\r\n            action.deck.cards.map((e) =>{\r\n                e.flipped = false;\r\n                e.id = i;\r\n                state[i] = e;\r\n                i++;\r\n            })\r\n            return [...state]\r\n        case FLIP_CARD:\r\n            return state.map((card,index ) => {\r\n                if (action.id === card.id) {\r\n                    return Object.assign({}, card, {\r\n                        flipped: !card.flipped\r\n                    })\r\n                }\r\n                return card\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst gameApp = combineReducers({\r\n    game,\r\n    cards\r\n});\r\n\r\nexport default gameApp"]},"metadata":{},"sourceType":"module"}